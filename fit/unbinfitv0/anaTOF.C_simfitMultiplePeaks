#include <iostream>
#include <time.h>

#include <bitset>
#include <stdint.h>
#include <vector>
#include <map>

#include <TSystem.h>
#include <TROOT.h>
#include <TH1.h>
#include <TH2.h>
#include <TAxis.h>
#include <TPad.h>
#include <TFile.h>
#include <TTree.h>
#include <TLine.h>
#include <TRandom.h>
#include <TString.h>
#include <TCanvas.h>
#include <TStyle.h>

#include <RooPolynomial.h>
#include <RooDataSet.h>
#include <RooArgList.h>
#include <RooArgSet.h>
#include <RooPlot.h>
#include <RooAddPdf.h>
#include <RooSimultaneous.h>

#include <vector>
#include "fitF.hh"
using namespace std;


using namespace RooFit;

class fitF;

typedef struct parms_t
{
    Double_t val[MAX_N_PARMS+MAX_NPEAKS];
    Double_t min[MAX_N_PARMS+MAX_NPEAKS];
    Double_t max[MAX_N_PARMS+MAX_NPEAKS];
    Bool_t isFix[MAX_N_PARMS+MAX_NPEAKS];
    Int_t index[MAX_N_PARMS+MAX_NPEAKS];
    Int_t category[MAX_N_PARMS+MAX_NPEAKS];
}parms_t;


typedef struct{
    std::string name;
    int id;
    int tag;
    double lowerbound;
    double upperbound;
    int print(){
        std::cout<<"roi = "<<std::endl;
        std::cout<<"id = "<<id<<std::endl;
        std::cout<<"name = "<<name<<std::endl;
        std::cout<<"tag = "<<tag<<std::endl;
        std::cout<<"lower bound = "<<lowerbound<<std::endl;
        std::cout<<"upper bound = "<<upperbound<<std::endl;
        std::cout<<"--------------"<<std::endl;
        return 0;
    }
}roi_t;


vector<roi_t*> ROIs;
void getROI(char* infile)
{

    vector<vector<string>> content;
    vector<string> row;
    string line, word;

    fstream file (infile, ios::in);
    if(file.is_open())
    {
        while(getline(file, line))
        {
            row.clear();

            stringstream str(line);

            while(getline(str, word, ','))
                row.push_back(word);
            content.push_back(row);
        }
    }
    else
        cout<<"Could not open the file\n";

    for(int i=0;i<content.size();i++)//row
    {
        if (i>0){
            roi_t* roi = new roi_t;
            roi->id = atoi(content[i][0].c_str());
            roi->name = content[i][1];
            roi->tag = atoi(content[i][2].c_str());
            roi->lowerbound = atof(content[i][3].c_str());
            roi->upperbound = atof(content[i][4].c_str());
            ROIs.push_back(roi);
        }
    }
    for (auto ii=ROIs.begin();ii!=ROIs.end();ii++){
        roi_t* s = *ii;
        s->print();
    }
    //! readall
}


RooAbsPdf* GetModel(RooAbsReal* p[],char* fitname, RooRealVar *x, parms_t* parms,Int_t category,Int_t sizeparms)
{
    RooRealVar* pvar[100];
    RooAbsReal* pp[MAX_N_PARMS];
    RooAbsReal* pbkg;
    RooAbsReal* pbkgratio;
    for (Int_t i=0;i<sizeparms;i++){
        if (parms->category[i]==category||parms->category[i]==-1){
            pvar[i]=(RooRealVar*) p[i];
            pvar[i]->setMax(parms->max[i]);
            pvar[i]->setMin(parms->min[i]);
            pvar[i]->setVal(parms->val[i]);
            pvar[i]->setConstant(parms->isFix[i]);
            if (parms->index[i]<MAX_N_PARMS)
                pp[parms->index[i]] = p[i];
            if (parms->index[i]==MAX_N_PARMS)
                pbkg = p[i];
            else if (parms->index[i]==MAX_N_PARMS+1)
                pbkgratio = p[i];
        }
    }
    fitF* fitmodel=new fitF(Form("peak_%s",fitname),"peak",*x,pp);
    RooPolynomial* pol1 = new RooPolynomial(Form("bkg_%s",fitname), "Linear background", *x, RooArgSet(*pbkg));
    RooAbsPdf* finalfitmodel = new RooAddPdf(Form("finalmodel_%s",fitname),"finalmodel",RooArgList(*pol1,*fitmodel),*pbkgratio);
    return finalfitmodel;
}

void anaTOF(char* infile){
    //////////////////////////////////////////////////////////
    //   This file has been automatically generated
    //     (Tue Mar  7 15:15:24 2023 by ROOT version6.22/08)
    //   from TTree tree/tree
    //   found on file: rootfiles/run5_0.root
    //////////////////////////////////////////////////////////


    //Reset ROOT and connect tree file
    gROOT->Reset();
    TTree* tree = NULL;
    TFile *f = (TFile*)gROOT->GetListOfFiles()->FindObject(infile);
    if (!f) {
        f = new TFile(infile);
    }
//    f->GetObject("tree",tree);
    f->GetObject("tree_drift_corr",tree);

    //Declaration of leaves types
    UInt_t          fUniqueID;
    UInt_t          fBits;
    Long64_t        ts;
    Double_t        tof1;
    Double_t        tof2;
    Double_t        e;
    Double_t        vetot;
    vector<float>   pulsestart1;
    vector<float>   pulsestart2;
    vector<float>   pulsestop;
    vector<float>   pulsecfdstop;

    // Set branch addresses.
    tree->SetBranchAddress("fUniqueID",&fUniqueID);
    tree->SetBranchAddress("fBits",&fBits);
    tree->SetBranchAddress("ts",&ts);
    tree->SetBranchAddress("tof1",&tof1);
    tree->SetBranchAddress("tof2",&tof2);
    tree->SetBranchAddress("e",&e);
    tree->SetBranchAddress("vetot",&vetot);
    tree->SetBranchAddress("pulsestart1",&pulsestart1);
    tree->SetBranchAddress("pulsestart2",&pulsestart2);
    tree->SetBranchAddress("pulsestop",&pulsestop);
    tree->SetBranchAddress("pulsecfdstop",&pulsecfdstop);
    Long64_t nentries = tree->GetEntries();
    Long64_t nbytes = 0;
    TFile* f1 = new TFile("test.root","recreate");



    Int_t Npeaks = 3;
    Double_t peakFitRange[] = {0,300};
    Int_t nbins = 600;

    Double_t xx[MAX_NPEAKS];
    Double_t peakOffsets[MAX_NPEAKS];
    peakOffsets[0] = 10000;
    peakOffsets[1] = 10554;
    peakOffsets[2] = 9400;

    parms_t parms;
    parms.category[0] = 0;parms.index[0] = 0;parms.isFix[0] = kFALSE;parms.min[0] = peakFitRange[0];parms.max[0] = peakFitRange[1];parms.val[0] = peakFitRange[0]/2+peakFitRange[1]/2;
    parms.category[1] = -1;parms.index[1] = 1;parms.isFix[1] = kFALSE;parms.min[1] = 0;parms.max[1] = 100;parms.val[1] = 7.96256;//width
    parms.category[2] = -1;parms.index[2] = 2;parms.isFix[2] = kFALSE;parms.min[2] = 0;parms.max[2] = 100;parms.val[2] = 0.6;//skewness
    parms.category[3] = -1;parms.index[3] = 3;parms.isFix[3] = kFALSE;parms.min[3] = 0;parms.max[3] = 100;parms.val[3] = 0.845234;//kurtosis
    parms.category[4] = -1;parms.index[4] = 4;parms.isFix[4] = kTRUE;parms.min[4] = 0;parms.max[4] = 10;parms.val[4] = 0.000001;//bkg
    parms.category[5] = -1;parms.index[5] = 5;parms.isFix[5] = kTRUE;parms.min[5] = 0;parms.max[5] = 1;parms.val[5] = 0.0000001;//ratio
    parms.category[6] = 1;parms.index[6] = 0;parms.isFix[6] = kFALSE;parms.min[6] = peakFitRange[0];parms.max[6] = peakFitRange[1];parms.val[6] = peakFitRange[0]/2+peakFitRange[1]/2;
    parms.category[7] = 2;parms.index[7] = 0;parms.isFix[7] = kFALSE;parms.min[7] = peakFitRange[0];parms.max[7] = peakFitRange[1];parms.val[7] = peakFitRange[0]/2+peakFitRange[1]/2;




    Double_t htof_all_edge = 9200;
    Int_t nwindows = 10;
    TH1F* htof_all = new TH1F("htof_all","htof_all",nbins*nwindows,htof_all_edge,htof_all_edge+(peakFitRange[1]-peakFitRange[0])*nwindows);

    TTree* treeFit[MAX_NPEAKS];
    for (Int_t i=0;i<Npeaks;i++){
        treeFit[i] = new TTree(Form("treeFit%d",i),Form("treeFit%d",i));
        treeFit[i]->Branch("x",&xx[i],"x/D");
    }

//    10767;10213;
//    10767-213;
    for (Long64_t i=0; i<nentries;i++) {
        nbytes += tree->GetEntry(i);
        if (vetot==0){
            for (Int_t i=0;i<Npeaks;i++){
                xx[i] = tof1-peakOffsets[i];
                treeFit[i]->Fill();
            }
            htof_all->Fill(tof1);
        }
    }

    RooRealVar *x=new RooRealVar("x","x",0,300) ;

    RooCategory sample("sample","sample") ;
    for (Int_t i=0;i<Npeaks;i++){
        sample.defineType(Form("data%d",i));
    }

    RooDataSet* data[MAX_NPEAKS];

    std::map<std::string,RooDataSet*> DataCollection;
    for (Int_t i=0;i<Npeaks;i++){
        data[i] = new RooDataSet(Form("data%d",i),Form("data%d",i),*x,Import(*treeFit[i]));
        DataCollection.emplace(Form("data%d",i),data[i]);
    }
    RooDataSet* combData = new RooDataSet("combData","combined data",*x,Index(sample),Import(DataCollection)) ;

    RooAbsReal* p[100];
    Int_t sizeparms = 8;
    for (Int_t i=0;i<sizeparms;i++){
        p[i]=new RooRealVar(Form("p%d",i),Form("p%d",i),10,0,20);
    }

    RooAbsPdf* fitModel[MAX_NPEAKS];
    for (Int_t i=0;i<Npeaks;i++){
        fitModel[i] = GetModel(p,Form("model%d",i),x,&parms,i,sizeparms);
    }

    RooSimultaneous* simPdf = new RooSimultaneous("simPdf","simultaneous pdf",sample) ;
    for (Int_t i=0;i<Npeaks;i++){
        simPdf->addPdf(*fitModel[i],Form("data%d",i)) ;
    }

    simPdf->fitTo(*combData,NumCPU(16),Save(kTRUE),PrintLevel(3));

    TCanvas* c1 = new TCanvas("c1","c1",1000,1000);
    Int_t npadrow = Npeaks/2+Npeaks%2;
    c1->Divide(2,npadrow);

    RooCurve* fitcurve[MAX_NPEAKS];
    for (Int_t i=0;i<Npeaks;i++){
        c1->cd(i+1);
        RooPlot* xframe0 = x->frame(Title(Form("Peak %d",i))) ;
        combData->plotOn(xframe0,Binning(nbins),Cut(Form("sample==sample::data%d",i))) ;
        simPdf->plotOn(xframe0,Slice(sample,Form("data%d",i)),ProjWData(sample,*combData), RooFit::Name(Form("peak%d",i))) ;
        xframe0->Draw();
        fitcurve[i]=(RooCurve*) xframe0->getCurve(Form("peak%d",i));
    }
    c1->Draw();


    TCanvas* c2 = new TCanvas("c2","c2",900,700);
    c2->cd();
    htof_all->SetMarkerSize(1);
    htof_all->SetMarkerStyle(20);
    htof_all->Draw("E0");
    TGraph* grPeak[MAX_NPEAKS];
    for (Int_t i=0;i<Npeaks;i++){
        vector<double> xpt;
        vector<double> ypt;
        for (Int_t j=0;j<fitcurve[i]->GetN();j++){
            xpt.push_back(fitcurve[i]->GetX()[j]+peakOffsets[i]);
            ypt.push_back(fitcurve[i]->GetY()[j]);
        }
        grPeak[i] = new TGraph(xpt.size(),&xpt[0],&ypt[0]);
        grPeak[i]->SetName(Form("fit_peak%d",i));
        grPeak[i]->SetLineColor(2);
        grPeak[i]->SetLineWidth(2);
        grPeak[i]->Draw("L same");
    }
    c2->Draw();

}
